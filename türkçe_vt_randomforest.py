# -*- coding: utf-8 -*-
"""türkçe_vt_randomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G0CNH-0d5_jVQUBu277qD8kAdvCYlwHx
"""

import pandas as pd
import numpy as np

train=pd.read_excel("clean_tweet_train.xlsx")
test=pd.read_excel("clean_tweet_test.xlsx")
train.head()

test.head()

Train = train.append(test, ignore_index=True).fillna(' ')
type(Train.text.tolist())

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(
    Train.text.tolist(), Train['sentiment'], test_size=0.33, random_state=1)

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer(analyzer="word",
                             tokenizer=None,
                             preprocessor=None,
                             stop_words=None,
                             max_features=5000)

train_data_features = vectorizer.fit_transform(x_train)

train_data_features = train_data_features.toarray()

from sklearn.ensemble import RandomForestClassifier

# training Random Forest
forest = RandomForestClassifier(n_estimators=100)
_ = forest.fit(train_data_features, y_train)

test_data_features = vectorizer.transform(x_test)
test_data_features = test_data_features.toarray()

y_pred = forest.predict(test_data_features)

predictions = pd.DataFrame(
    data={"text": x_test, "sentiment_true": y_test, "sentiment_pred": y_pred})

#makismum tüm frekans alındı,n_gram 2 için ,stemmer yok,stopwords kullanılmadı,count vectorizer kullanıldı
correct_count = (predictions["sentiment_pred"] == predictions["sentiment_true"]).sum()
print("Accuracy is %{:.3f}".format(100 * correct_count / len(y_test)))

from sklearn.metrics import confusion_matrix
cf = confusion_matrix(y_test, y_pred)
print('Confusion Matrix')
print('\tPredictions')
print('\t{:>5}\t\t{:>5}\t\t{:>5}'.format(0,1,2))
for row_id, real_row in enumerate(cf):
    print('{}\t{:>5}\t{:>5}\t{:>5}'.format(row_id, real_row[0], real_row[1],real_row[2]))